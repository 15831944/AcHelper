<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AcHelper.WPF.6</name>
    </assembly>
    <members>
        <member name="M:AcHelper.WPF.CAD.CadThemeChangedArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="theme"></param>
        </member>
        <member name="P:AcHelper.WPF.CAD.CadThemeChangedArgs.Theme">
            <summary>
            Name of the new theme.
            </summary>
        </member>
        <member name="T:AcHelper.WPF.CAD.CadThemeChangedHandler">
            <summary>
            Handles the event of the changing ColorTheme in AutoCAD.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:AcHelper.WPF.CAD.ThemeWatcher">
            <summary>
            Keeps track of the AutoCAD ColorTheme
            </summary>
        </member>
        <member name="P:AcHelper.WPF.CAD.ThemeWatcher.Current">
            <summary>
            Gets the <see cref="T:AcHelper.WPF.CAD.ThemeWatcher"/> object for the current Running AutoCAD session.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.CAD.ThemeWatcher.CurrentCadTheme">
            <summary>
            Gets the current AutoCAD ColorTheme.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.CAD.ThemeWatcher.GetColorThemeVariable">
            <summary>
            Gets the current AutoCAD ColorTheme SystemVariable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AcHelper.WPF.CAD.ThemeWatcher.OnCadThemeChanged(System.String)">
            <summary>
            Fires when <see cref="P:AcHelper.WPF.CAD.ThemeWatcher.CurrentCadTheme"/> changes.
            </summary>
            <param name="newTheme"></param>
        </member>
        <member name="T:AcHelper.WPF.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Extensions.ApplyTheme(System.Windows.Controls.ContentControl,System.String,System.String)">
            <summary>
            Applies the given theme to the UserControl
            </summary>
            <param name="control"></param>
            <param name="oldTheme"></param>
            <param name="newTheme"></param>
        </member>
        <member name="M:AcHelper.WPF.Extensions.ApplyResources(System.Windows.Controls.ContentControl)">
            <summary>
            
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:AcHelper.WPF.Extensions.GetAssemblyName(System.Windows.Controls.ContentControl)">
            <summary>
            Returns the name of the Assembly where the ContentControl is created.
            </summary>
            <param name="control"></param>
            <returns>Name of Assembly.</returns>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteVisibleStateChangedEventHandler">
            <summary>
            Represents the method that will handle an event that handles the
            <see cref="E:AcHelper.WPF.Palettes.IPalette.VisibleStateChanged"/> event of a WpfPalette.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:AcHelper.WPF.Palettes.WpfPaletteVisibleStateChangedEventArgs"/>WpfPaletteVisibleStateChangedEventArgs that contains the event data.</param>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteClosingEventHandler">
            <summary>
            Represents the method that will handle an event that handles the
            <see cref="E:AcHelper.WPF.Palettes.IPalette.WpfPaletteClosing"/> event of a WpfPalette.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:AcHelper.WPF.Palettes.WpfPaletteClosingEventArgs"/>WpfPaletteClosingEventArgs that contains the event data.</param>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteClosedEventHandler">
            <summary>
            Represents the method that will handle an event that handles the
            <see cref="E:AcHelper.WPF.Palettes.IPalette.WpfPaletteClosed"/> event of a WpfPalette.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A <see cref="T:AcHelper.WPF.Palettes.WpfPaletteClosedEventArgs"/>WpfPaletteClosedEventArgs that contains the event data.</param>
        </member>
        <member name="T:AcHelper.WPF.Palettes.VisibleState">
            <summary>
            Enum that represents the visible state of a WpfPalette.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.IPalette.VisibleState">
            <summary>
            The visible state of the WpfPalette.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.IPalette.PaletteName">
            <summary>
            The name of the WpfPalette.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.IPalette.PaletteSet">
            <summary>
            The parent WpfPaletteset wich contains this WpfPalette
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.IPalette.ClosePaletteSet">
            <summary>
            Closes the paletteset.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.IPalette.Close">
            <summary>
            Closes the WpfPalette
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPalette.VisibleState">
            <summary>
            Sets and gets the VisibleState.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPalette.PaletteName">
            <summary>
            Sets and gets the Palette name.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPalette.PaletteSet">
            <summary>
             Sets and gets the parent paletteset.
            </summary>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteSetVisibleStateChangedEventHandler">
            <summary>
            Represents the method that handles the 
            WpfPalet5teSetVisibleStateChanged event of a WpfPaletteset.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="arg">A WpfPaletteSetVisibleStatChangedEventArgs that contains the event data.</param>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteSet">
            <summary>
            Paletteset containing (multiple) palettes; Optimized for WPF.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.#ctor(System.String,System.Guid)">
            <summary>
            Creates a WpfPaletteset.
            </summary>
            <param name="name">Name of the paletteset to create.</param>
            <param name="guid">Guid of the paletteset to create.</param>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.#ctor(System.String,System.Guid,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Creates a WpfPaletteset.
            </summary>
            <param name="name">Name of the paletteset to create.</param>
            <param name="guid">Guid of the paletteset to create.</param>
            <param name="size">Size of the paletteset to create.
            Default size is Width: 350, Height: 450.</param>
            <param name="minimumSize">Minimum size of the paletteset to create.
            Default size is Width: 350, Height: 450.</param>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.#ctor(System.String,System.Guid,System.Drawing.Size,System.Drawing.Size,Autodesk.AutoCAD.Windows.DockSides,Autodesk.AutoCAD.Windows.DockSides)">
            <summary>
            Creates a WpfPaletteset.
            </summary>
            <param name="name">Name of the paletteset to create.</param>
            <param name="guid">Guid of the paletteset to create.</param>
            <param name="size">Size of the paletteset to create.
            Default size is Width: 350, Height: 450.</param>
            <param name="minimumSize">Minimum size of the paletteset to create.
            Default size is Width: 350, Height: 450.</param>
            <param name="dockside">Default side to dock the paletteset is Left.</param>
            <param name="docksideEnabled">Default enabled sides to dock the paletteset are Left, Right, None (floating).</param>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPaletteSet.PaletteSetName">
            <summary>
            Represents the name of the paletteset.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPaletteSet.Palettes">
            <summary>
            A list of all the palettes wich this paletteset contains.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.HasPalette(System.String)">
            <summary>
            Checks whether this paletteset contains a palette with the given name.
            </summary>
            <param name="name">Name of the palette</param>
            <returns>True if the paletteset contains a palette with the given name; Otherwise false.</returns>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.GetPalette(System.String)">
            <summary>
            Gets the palette with the given name.
            </summary>
            <param name="name">Name of the palette to return.</param>
            <returns></returns>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPaletteSet.Count">
            <summary>
            Counts the amount of palettes assigned to this paletteset.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPaletteSet.Item(System.Int32)">
            <summary>
            Gets the palette on the given index within this paletteset.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.AddPalette(AcHelper.WPF.Palettes.IPalette)">
            <summary>
            Add palette to paletteset
            </summary>
            <param name="palette"></param>
            <exception cref="T:AcHelper.WPF.Palettes.WpfPaletteSetException"/>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSet.RemovePalette(System.String)">
            <summary>
            Removes palette from paletteset.
            </summary>
            <param name="name"></param>
            <exception cref="T:AcHelper.WPF.Palettes.WpfPaletteSetException"/>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteSetException">
            <summary>
            
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="paletteSetName"></param>
            <param name="inner"></param>
        </member>
        <member name="P:AcHelper.WPF.Palettes.WpfPaletteSetException.PaletteSetName">
            <summary>
            
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AcHelper.WPF.Palettes.WpfPaletteSetsHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.GetInstance">
            <summary>
            Static instance of WpfPaletteSetsHandler.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.CreatePaletteSet(System.String,System.Guid)">
            <summary>
            Creates a new <see cref="T:AcHelper.WPF.Palettes.WpfPaletteSet"/>WpfPaletteSet and adds it to the dictionary.
            </summary>
            <param name="name"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.CreatePaletteSet(System.String,System.Guid,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Creates a new <see cref="T:AcHelper.WPF.Palettes.WpfPaletteSet"/>WpfPaletteSet and adds it to the dictionary.
            </summary>
            <param name="name"></param>
            <param name="guid"></param>
            <param name="size"></param>
            <param name="minimumSize"></param>
            <returns></returns>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.CreatePaletteSet(System.String,System.Guid,System.Drawing.Size,System.Drawing.Size,Autodesk.AutoCAD.Windows.DockSides,Autodesk.AutoCAD.Windows.DockSides)">
            <summary>
            Creates a new <see cref="T:AcHelper.WPF.Palettes.WpfPaletteSet"/>WpfPaletteSet and adds it to the dictionary.
            </summary>
            <param name="name"></param>
            <param name="guid"></param>
            <param name="size"></param>
            <param name="minimumSize"></param>
            <param name="dockside"></param>
            <param name="docksideEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.HidePaletteSet(System.Guid)">
            <summary>
            Turn off visibility of given <see cref="T:AcHelper.WPF.Palettes.WpfPaletteSet"/>WpfPaletteSet.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:AcHelper.WPF.Palettes.WpfPaletteSetsHandler.ActivatePaletteSet(System.Guid)">
            <summary>
            Turn on visibility of the given <see cref="T:AcHelper.WPF.Palettes.WpfPaletteSet"/>WpfPaletteSet.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="F:AcHelper.WPF.ViewModels.PaletteViewModelBase.ThemePropertyName">
            <summary>
            The <see cref="P:AcHelper.WPF.ViewModels.PaletteViewModelBase.Theme" /> property's name.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.ViewModels.PaletteViewModelBase.Theme">
            <summary>
            Sets and gets the Theme property.
            Changes to that property's value raise the PropertyChanged event. 
            </summary>
        </member>
        <member name="T:AcHelper.WPF.Themes.PaletteThemeExtension">
            <summary>
            
            </summary>
        </member>
        <member name="F:AcHelper.WPF.Themes.PaletteThemeExtension.ThemePropertyName">
            <summary>
            The Theme attached property's name.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Themes.PaletteThemeExtension.GetTheme(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Theme attached property 
            for a given dependency object.
            </summary>
            <param name="obj">The object for which the property value
            is read.</param>
            <returns>The value of the Theme property of the specified object.</returns>
        </member>
        <member name="M:AcHelper.WPF.Themes.PaletteThemeExtension.SetTheme(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the value of the Theme attached property
            for a given dependency object. 
            </summary>
            <param name="obj">The object to which the property value
            is written.</param>
            <param name="value">Sets the Theme value of the specified object.</param>
        </member>
        <member name="F:AcHelper.WPF.Themes.PaletteThemeExtension.ThemeProperty">
            <summary>
            Identifies the Theme attached property.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Themes.PaletteThemeExtension.OnThemeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:AcHelper.WPF.Themes.PluginResourcesCollection.#ctor(System.Collections.Generic.List{System.Windows.ResourceDictionary},System.Collections.Generic.Dictionary{System.String,System.Windows.ResourceDictionary},System.Windows.ResourceDictionary)">
            <summary>
            Constructs an instance of <see cref="T:AcHelper.WPF.Themes.IPluginResourcesCollection"/>.
            </summary>
            <param name="resources">List of relative addresses of the resources. 
            </param>
            <param name="themes">Dictionary of themenames and relative addresses of the themes.</param>
            <param name="locator">Relative address of the ResourceDictionary containing the ModelViewLocator source.</param>
            
            <remarks>
            Format relative address: /[assembly];component/[namespace].[filename].xaml
            </remarks>
        </member>
        <member name="P:AcHelper.WPF.Themes.PluginResourcesCollection.PluginName">
            <summary>
            Gets the name of the plugin associated to these resources.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Themes.PluginResourcesCollection.Themes">
            <summary>
            Gets a dictionary with all registered theme resource dictionaries.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Themes.PluginResourcesCollection.Resources">
            <summary>
            Gets a list with al resources.
            </summary>
        </member>
        <member name="P:AcHelper.WPF.Themes.PluginResourcesCollection.Locator">
            <summary>
            Gets the resource dictionary with the ModelViewLocator.
            </summary>
        </member>
        <member name="M:AcHelper.WPF.Themes.PluginResourcesCollection.AddResource(System.String)">
            <summary>
            Adds a resource dictionary to the plugin resource collection.
            </summary>
            <param name="relativeAddress">Relative address to the resource dictionary.</param>
            <returns>True if the resource dictionary didn't exist already and is successfuly added; Otherwise, false.</returns>
        </member>
        <member name="M:AcHelper.WPF.Themes.PluginResourcesCollection.AddTheme(System.String,System.String)">
            <summary>
            Adds a Theme resource dictionary to the plugin resource collection.
            </summary>
            <param name="name">Name of the theme.</param>
            <param name="relativeAddress">relative address to the resource dictionary.</param>
            <returns>True if the resource dictionary didn't exist already and is successfuly added; Otherwise, false.</returns>
        </member>
        <member name="M:AcHelper.WPF.Themes.ThemeManager.RegisterPluginResourcesCollection(AcHelper.WPF.Themes.IPluginResourcesCollection)">
            <summary>
            Registers a Resource collection of a plugin.
            </summary>
            <param name="collection"></param>
            <returns>True if the collection don't exeist already and can be registered; Otherwise false.</returns>
        </member>
        <member name="M:AcHelper.WPF.Themes.ThemeManager.GetResourceCollection(System.String)">
            <summary>
            Gets the <see cref="T:AcHelper.WPF.Themes.PluginResourcesCollection"/>ResourcesSet associated with the given Pluginname.
            </summary>
            <param name="pluginName">Name of the plugin.</param>
            <returns>PluginResourcesSet if the plugin is registered; otherwise it throws a <see cref="T:AcHelper.WPF.Themes.PluginResourcesNotRegisteredException"/></returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:AcHelper.WPF.Themes.PluginResourcesNotRegisteredException"/>
        </member>
        <member name="M:AcHelper.WPF.Themes.ThemeManager.GetPluginTheme(System.String,System.String)">
            <summary>
            Gets a PluginTheme associated with the given Pluginname and Theme name.
            </summary>
            <param name="pluginName"></param>
            <param name="themeName">Name of the theme (Case insensitive)</param>
            <returns>PluginTheme if exists; Otherwise it returns null.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:AcHelper.WPF.Themes.PluginResourcesNotRegisteredException"/>
        </member>
        <member name="M:AcHelper.WPF.Themes.ThemeManager.GetThemeNames(System.String)">
            <summary>
            Returns all registered theme names associated with the provided plugin name.
            </summary>
            <param name="pluginName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
