<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AcHelper</name>
    </assembly>
    <members>
        <member name="T:AcHelper.Active">
            <summary>
            runtime environment.
            </summary>
        </member>
        <member name="P:AcHelper.Active.Document">
            <summary>
            Returns the active Document object.
            </summary>
        </member>
        <member name="P:AcHelper.Active.Database">
            <summary>
            Returns the active Database object.
            </summary>
        </member>
        <member name="P:AcHelper.Active.Editor">
            <summary>
            Returns the active Database object.
            </summary>
        </member>
        <member name="P:AcHelper.Active.DocumentName">
            <summary>
            Returns the Name of the active document.
            </summary>
        </member>
        <member name="P:AcHelper.Active.DocumentDirectory">
            <summary>
            Gets the Directory of the active document.
            </summary>
        </member>
        <member name="P:AcHelper.Active.DocumentFullPath">
            <summary>
            Returns Full path of the active document.
            </summary>
        </member>
        <member name="M:AcHelper.Active.WriteMessage(System.String)">
            <summary>
            Sends a string to the command line in the active Editor.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:AcHelper.Active.WriteMessage(System.String,System.Object[])">
            <summary>
            Sends a string to the command line in the active Editor using String.Format.
            </summary>
            <param name="message">The message containing format specifications.</param>
            <param name="parameter">The variables to substitue into the format string.</param>
        </member>
        <member name="M:AcHelper.Active.Regenerate">
            <summary>
            Regenerates active modelspace. Equivalent of Editor.Regen().
            </summary>
        </member>
        <member name="T:AcHelper.Commands.CommandHandlerBase">
            <summary>
            The CommandHandlerBase provides base functionalities for the class containing AutoCAD commands. 
            </summary>
        </member>
        <member name="M:AcHelper.Commands.CommandHandlerBase.ExecuteCommand``1">
            <summary>
            Executes the given <see cref="T:AcHelper.Commands.IAcadCommand"/>IAcadCommand class as a command.
            When an unhandled exception occurs, it will be caught and thrown as a dialog.
            This way the the chance for an AutoCAD crash stays minimal.
            </summary>
            <typeparam name="T">Class based on interface IAcadCommand</typeparam>
        </member>
        <member name="M:AcHelper.Commands.CommandHandlerBase.ExecuteFromCommandLine(System.String,System.Object[])">
            <summary>
            Executes a command from the commandline.
            </summary>
            <param name="cmd">Command name.</param>
            <param name="parameters">Optional parameters.</param>
        </member>
        <member name="M:AcHelper.Commands.CommandHandlerBase.ExecuteFromCommandLine(System.Boolean,System.String,System.Object[])">
            <summary>
            Executes a command from the commandline.
            </summary>
            <param name="echo">true to echo command in commandline.</param>
            <param name="cmd">Command name.</param>
            <param name="parameters">Optional parameters.</param>
        </member>
        <member name="T:AcHelper.Commands.IAcadCommand">
            <summary>
            The IAcadCommand interface is used to execute specific AutoCAD commands.
            These commands will be executed through the <see cref="M:AcHelper.Commands.CommandHandlerBase.ExecuteCommand``1"/>ExecuteCommand{T} method.
            This way any uncaught error will be caught after all.
            </summary>
        </member>
        <member name="M:AcHelper.Commands.IAcadCommand.Execute">
            <summary>
            Executes the Command code.
            </summary>
        </member>
        <member name="M:AcHelper.Common.UsingTransaction(System.Action{AcHelper.Utilities.AcTransaction},System.String)">
            <summary>
            Wrapper for the active Database's TransactionManager.
            The wrapper locks the document before starting a transaction!
            </summary>
            <param name="action">Method which uses the Transaction.</param>
            <param name="commandName">Name of action the TransactionManager is executing.</param>
        </member>
        <member name="M:AcHelper.Common.UsingTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction})">
            <summary>
            Wrapper for the active Database's TransactionManager.
            The wrapper locks the document before starting a transaction!
            </summary>
            <param name="doc"></param>
            <param name="action">Method which uses the Transaction.</param>
        </member>
        <member name="M:AcHelper.Common.UsingTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.String,System.Action{AcHelper.Utilities.AcTransaction})">
            <summary>
            Wrapper for the active Database's TransactionManager.
            The wrapper locks the document before starting a transaction!
            </summary>
            <param name="doc"></param>
            <param name="commandName">Name of action the TransactionManager is executing.</param>
            <param name="action">Method which uses the Transaction.</param>
            <exception cref="T:AcHelper.Exceptions.TransactionException"/>
        </member>
        <member name="M:AcHelper.Common.UsingModelSpace(System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String)">
            <summary>
            Wrapper for the active Document's ModelSpace.
            The wrapper locks the document before starting a transaction!
            </summary>
            <param name="action">Method which uses the Transaction.</param>
            <param name="commandName">Name of action the TransactionManager is executing.</param>
        </member>
        <member name="M:AcHelper.Common.UsingModelSpace(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord})">
            <summary>
            Wrapper for the active Document's ModelSpace.
            The wrapper locks the document before starting a transaction!
            </summary>
            <param name="doc"></param>
            <param name="action">Method which uses the Transaction.</param>
        </member>
        <member name="M:AcHelper.Common.UsingModelSpace(Autodesk.AutoCAD.ApplicationServices.Document,System.String,System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord})">
            <summary>
            Wrapper for the active Document's ModelSpace.
            Makes the ModelSpace writable and
            locks the document before starting a transaction!
            </summary>
            <param name="doc"></param>
            <param name="commandName">Name of action the TransactionManager is executing.</param>
            <param name="action"></param>
            <exception cref="T:AcHelper.Exceptions.TransactionException"/>
        </member>
        <member name="M:AcHelper.DocumentExtensions.StartTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction})">
            <summary>
            Starts a transaction for this document
            and executes an action with AcTransaction as parameter.
            </summary>
            <param name="doc">Document.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:AcHelper.DocumentExtensions.StartTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.String,System.Action{AcHelper.Utilities.AcTransaction})">
            <summary>
            Starts a transaction for this document
            and executes an action with AcTransaction as parameter.
            </summary>
            <param name="doc">Document.</param>
            <param name="command">Command name under which the action is executed.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:AcHelper.DocumentExtensions.StartTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord})">
            <summary>
            Starts a transaction for this document
            and executes an action with AcTransaction and ModelSpace as parameters.
            </summary>
            <param name="doc">Document.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:AcHelper.DocumentExtensions.StartTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.String,System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord})">
            <summary>
            Starts a transaction for this document
            and executes an action with AcTransaction and ModelSpace as parameters.
            </summary>
            <param name="doc">Document.</param>
            <param name="command">Command name under which the action is executed.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:AcHelper.DocumentExtensions.AddEntity``1(Autodesk.AutoCAD.ApplicationServices.Document,Autodesk.AutoCAD.DatabaseServices.Entity)">
            <summary>
            Adds an Entity to the modelspace of this document.
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
            <param name="doc">Document</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AcHelper.Enumerables.DbObjectEnumerable`1">
            <summary>
            An <c>IEnumerable</c> implementation that returns a <see cref="T:AcHelper.Enumerables.DbObjectEnumerator`1"/>.
            </summary>
            <typeparam name="T">A type that derives from <c>DBObject</c>.</typeparam>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.OpenMode)">
            <summary>
            Initializes a new _instance of the <see cref="T:AcHelper.Enumerables.DbObjectEnumerable`1"/> class.
            </summary>
            <param name="enumerable">The enumerable</param>
            <param name="transaction">The current transaction.</param>
            <param name="openMode">The open mode.</param>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used
            to iterate through the collection.
            </returns>
        </member>
        <member name="T:AcHelper.Enumerables.DbObjectEnumerator`1">
            <summary>
            Generic <c>IEnumerator</c> implementation that wraps an <c>IEnumerator&lt;ObjectId&gt;</c>
            and instead gives actual objects that derive from <c>DBObject</c>.
            </summary>
            <typeparam name="T">A type that derives from <c>DBObject</c>.</typeparam>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{Autodesk.AutoCAD.DatabaseServices.ObjectId},Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.OpenMode)">
            <summary>
            Initializes a new _instance of the <see cref="T:AcHelper.Enumerables.DbObjectEnumerator`1"/> class.
            </summary>
            <param name="enumerator">The enumerator to wrap.</param>
            <param name="transaction">The current transaction.</param>
            <param name="openMode">The open mode.</param>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:AcHelper.Enumerables.DbObjectEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first
            element in the collection
            </summary>
        </member>
        <member name="P:AcHelper.Enumerables.DbObjectEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator. 
            </returns>
        </member>
        <member name="P:AcHelper.Enumerables.DbObjectEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="M:AcHelper.ExceptionHandler.WriteToCommandLine(System.Exception,System.Boolean)">
            <summary>
            Writes the exception message to the commandline.
            </summary>
            <param name="ex">Exception</param>
            <param name="inner">true if messages from innerexceptions also need to be written.</param>
        </member>
        <member name="M:AcHelper.ExceptionHandler.ShowDialog(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Displays the exception message in a dialog.
            </summary>
            <param name="ex"></param>
            <param name="inner">true if messages from innerexceptions also need to be displayed.</param>
            <param name="cmdLine">true if the message also needs to be written on the commandline.</param>
        </member>
        <member name="M:AcHelper.ExtensionMethods.ForEach``1(Autodesk.AutoCAD.DatabaseServices.Database,System.Action{``0})">
            <summary>
            Loops through all entities of the given type in modelspace.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="database"></param>
            <param name="action"></param>
        </member>
        <member name="M:AcHelper.ExtensionMethods.ForEach``1(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{``0})">
            <summary>
            Loops through all entities of the given type in modelspace.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="doc"></param>
            <param name="action"></param>
        </member>
        <member name="M:AcHelper.ExtensionMethods.UsingModelSpace(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String)">
            <summary>
            <see cref="M:AcHelper.Common.UsingModelSpace(System.Action{AcHelper.Utilities.AcTransaction,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord},System.String)"/>
            </summary>
            <param name="document"></param>
            <param name="action"></param>
            <param name="CommandName"></param>
        </member>
        <member name="M:AcHelper.ExtensionMethods.UsingTransaction(Autodesk.AutoCAD.ApplicationServices.Document,System.Action{AcHelper.Utilities.AcTransaction},System.String)">
            <summary>
            <see cref="M:AcHelper.Common.UsingTransaction(System.Action{AcHelper.Utilities.AcTransaction},System.String)"/>
            </summary>
            <param name="document"></param>
            <param name="action"></param>
            <param name="commandName"></param>
        </member>
        <member name="M:AcHelper.ExtensionMethods.GetObject``1(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.ObjectId,Autodesk.AutoCAD.DatabaseServices.OpenMode,System.Boolean)">
            <summary>
            Gets the DBObject corresponding the given ObjectId.
            </summary>
            <typeparam name="T">DBObject type</typeparam>
            <param name="tr">Database Transaction</param>
            <param name="objectId"></param>
            <param name="openMode"></param>
            <param name="openErased">Open object if erased</param>
            <returns>DBObject as T</returns>
        </member>
        <member name="T:AcHelper.Logger">
            <summary>
            The logger provides an easy access to the <see cref="T:BuerTech.Utilities.Logger.LogWriter"/>.
            </summary>
        </member>
        <member name="M:AcHelper.Logger.Initialize(BuerTech.Utilities.Logger.LogSetup)">
            <summary>
            Initializes the Logger before it's available for use.
            </summary>
            <param name="setup"></param>
        </member>
        <member name="M:AcHelper.Logger.Initialize(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the Logger before it's available for use.
            </summary>
            <param name="application">Name of the appication using the LogWriter.</param>
            <param name="saveLocation">Path to the directory where to save the logfile.</param>
            <param name="maxAge">Max age of cached logs in seconds.</param>
            <param name="maxQueueSize">Max amount of logs in cache.</param>
        </member>
        <member name="M:AcHelper.Logger.WriteToLog(System.String,BuerTech.Utilities.Logger.LogPrior)">
            <summary>
            Logs a message to the logfile.
            </summary>
            <param name="message"></param>
            <param name="priority"></param>
        </member>
        <member name="M:AcHelper.Logger.WriteToLog(System.Exception,BuerTech.Utilities.Logger.LogPrior)">
            <summary>
            Logs an <see cref="T:System.Exception"/> to the logfile
            </summary>
            <param name="exception"></param>
            <param name="priority"></param>
        </member>
        <member name="M:AcHelper.Logger.Debug(System.String)">
            <summary>
            Writes a seperate log to de logfile with debug information.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AcHelper.Logger.Dispose">
            <summary>
            Disposes the LogWriter.
            </summary>
        </member>
        <member name="F:AcHelper.Utilities.AcTransaction._transaction">
            <summary>
            The current transaction.
            </summary>
        </member>
        <member name="F:AcHelper.Utilities.AcTransaction._started">
            <summary>
            Is the transaction started and does it need a commit or abort.
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.#ctor">
            <summary>
            Starts a transaction if needed
            </summary>
            <exception cref="T:Autodesk.AutoCAD.Runtime.Exception"/>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.#ctor(Autodesk.AutoCAD.ApplicationServices.Document)">
            <summary>
            Starts a transaction if needed
            </summary>
            <param name="doc"></param>
            <exception cref="T:Autodesk.AutoCAD.Runtime.Exception"/>
        </member>
        <member name="P:AcHelper.Utilities.AcTransaction.Transaction">
            <summary>
            <see cref="!:Autodesk.AutoCAD.DatabaseServices.Database.Transaction"/>
            </summary>
        </member>
        <member name="P:AcHelper.Utilities.AcTransaction.ModelSpace">
            <summary>
            Gets the ModelSpace BlockTableRecord.
            </summary>
        </member>
        <member name="P:AcHelper.Utilities.AcTransaction.IsStarted">
            <summary>
            Is the transaction started and does it need a commit or abort.
            </summary>
        </member>
        <member name="P:AcHelper.Utilities.AcTransaction.Document">
            <summary>
            Document of the transaction.
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.Commit">
            <summary>
            Commit the current transaction
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.Abort">
            <summary>
            Abort the current transaction
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.Dispose">
            <summary>
            closes the transaction
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.AcTransaction.Dispose(System.Boolean)">
            <summary>
            disposes the object
            </summary>
            <param name="disposing">the disposing status input parameter</param>
        </member>
        <member name="M:AcHelper.Utilities.WriteEnabler.#ctor(Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary>
            Opens a DBObject for write within the current Document.
            </summary>
            <param name="dbObject">Object to open for write.</param>
            <exception cref="T:AcHelper.Utilities.WriteEnablerException"/>
            <exception cref="T:Autodesk.AutoCAD.Runtime.Exception"/>
        </member>
        <member name="M:AcHelper.Utilities.WriteEnabler.#ctor(Autodesk.AutoCAD.ApplicationServices.Document,Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary>
            Opens a DBObject for write.
            </summary>
            <param name="doc">Document where the object is being found.</param>
            <param name="dbObject">Object to open for write.</param>
            <exception cref="T:AcHelper.Utilities.WriteEnablerException"/>
            <exception cref="T:Autodesk.AutoCAD.Runtime.Exception"/>
        </member>
        <member name="M:AcHelper.Utilities.WriteEnabler.Dispose">
            <summary>
            Calls DowngradeOpen if necessary
            </summary>
        </member>
        <member name="M:AcHelper.Utilities.WriteEnabler.Dispose(System.Boolean)">
            <summary>
            disposes the object
            </summary>
            <param name="disposing">the disposing status input parameter</param>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.GetNamedObjectsDictionary(System.String)">
            <summary>
            Gets a Named Objects Dictionary with the given key
            If the collection does not contain the key, it will create a new Named Objects Dictionary instance.
            </summary>
            <param name="key">Name of the Named objects Dictionary</param>
            <returns>DBDictionary</returns>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.GetXrecord(System.String,System.String)">
            <summary>
            Gets the data from an Xrecord.
            </summary>
            <param name="dictionaryName">Name of Named Objects Dictionary</param>
            <param name="xKey">Key of Xrecord</param>
            <returns>ResultBuffer with data or Null if nothing found.</returns>
            <exception cref="!:AcHelper.Utilities.XRecordException"/>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.GetEntityXrecord(Autodesk.AutoCAD.DatabaseServices.ObjectId,System.String)">
            <summary>
            Gets the data from an Entity Xrecord.
            </summary>
            <param name="entityId">ObjectId of the entity</param>
            
            <param name="xKey"></param>
            <returns></returns>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.RemoveDocumentXrecord(System.String,System.String)">
            <summary>
            Removes Xrecord with given key
            </summary>
            <param name="dictionaryName">Name of Objects Dictionary.</param>
            <param name="xKey">Key of Xrecord to remove.</param>
            <returns>True if succeed, false if Xrecord does not exist.</returns>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.RemoveEntityXrecord(Autodesk.AutoCAD.DatabaseServices.ObjectId,System.String)">
            <summary>
            Removes Xrecord from Entity with given key.
            </summary>
            <param name="entityId"></param>
            <param name="xKey">Key of Xrecord to remove.</param>
            <returns>True if succeed, False if Xrecord does not exist.</returns>
        </member>
        <member name="M:AcHelper.Utilities.XRecordHandler.RemoveXrecord(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,System.String)">
            <summary>
            Removes Xrecord with given key.
            </summary>
            <param name="nod">Named Object Dictionary containing the Xrecord.</param>
            <param name="xKey">Key of the Xrecord.</param>
            <param name="dictionaryName">If not Xrecord of Entity, the Named Object Dictionary has a name.</param>
            <returns>True if succeed, False if Xrecord does not exist.</returns>
        </member>
    </members>
</doc>
